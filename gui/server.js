const { createServer } = require("http");
const { parse } = require("url");
const next = require("next");
const fs = require("fs");
const fileutil = require("./loaderUtil/fileUtil_LOADER");
const configutil = require("./loaderUtil/configUtil_LOADER");
const path = require("path");
const requestutil = require("./loaderUtil/requestStats_LOADER");
const dev = process.env.NODE_ENV != "production";
const app = next({ dev });
const handle = app.getRequestHandler();
var fileStructure;

// Your API endpoint to retrieve the file structure
app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url, true);
    // Handle other requests using Next.js default behavior
    handle(req, res, parsedUrl);
  }).listen(3000, (err) => {
    // figure out if the configuration folder exists yet
    if (!fs.existsSync("configuration/")) {
      fs.mkdirSync("configuration/");
      fs.writeFileSync(
        "configuration/settings.yml",
        "# DO NOT EDIT THIS FILE \n# This file is designed to be edited by \n# using the graphical editor or the API.\nsetupYet: false"
      );
      fs.writeFileSync("configuration/stats.yml", "apiUsage:");
    } else {
      var config = configutil.readConfiguration();
      if (config.setupYet == undefined) {
        // we know the config is tampered with
        console.error(
          "[ERROR] Cannot continue. It looks like the configuration has been tampered with."
        );
        process.exit();
      } else if (config.setupYet == true) {
        fileStructure = fileutil.getDirectoriesRecursive(
          config.storageLocation
        );
        fileStructure.push("/");

        fs.writeFileSync('configuration/structcache.json', JSON.stringify(fileStructure))
      }
    }
    // Generate the file structure

    if (err) throw err;
    console.log("> Ready on http://localhost:3000");
  });
});
